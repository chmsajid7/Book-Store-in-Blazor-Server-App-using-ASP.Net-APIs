@page "/authors"
@using BlazorServerApp.Data
@using BlazorServerApp.Services
@using AbdoZRazorLibrary
@using Blazored.LocalStorage
@using BlazorServerApp.Shared
@using System.Text.Json
@inject IBookStoresService<Author> bookStoresService
@inject IUserService userService
@inject ILocalStorageService localStorageService
@inject IJSRuntime JSRuntime
@inject HttpClient http
@implements IDisposable
@using Newtonsoft.Json;

<div class="col-12">
    <h3><b>Enter Author Information</b></h3>
    <hr />

    <ServerValidations IsVisible="IsVisible" Result="Result">
        @RecordName
    </ServerValidations>

    <EditForm Model="@author" OnValidSubmit="@SaveAuthor">
        @*<DataAnnotationsValidator />*@

        <div class="col-12 row">
            <label class="col-2 font-weight-bold">first name :</label>
            <input @ref="firstNameTextBox" class="form-control col-3" @bind="author.FirstName" placeholder="first name" />
            &nbsp;<ValidationMessage For="@(() => author.FirstName)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">last name :</label>
            <InputText class="form-control col-3" @bind-Value="author.LastName" placeholder="last name" />
            &nbsp;<ValidationMessage For="@(() => author.LastName)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">city :</label>
            <SelectCity OnChangeEvent="OnSelectCityChange"></SelectCity>
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">email address :</label>
            <InputText class="form-control col-3" @bind-Value="author.EmailAddress" placeholder="email address" />
            &nbsp;<ValidationMessage For="@(() => author.EmailAddress)" />
        </div>
        <br />
        <div class="col-12 row">
            <span class="col-2"></span>
            <input type="submit" class="form-control col-1 btn btn-primary" value="Save" />
            <span>&nbsp;</span>
            <input type="button" class="form-control col-1 btn btn-primary" @onclick="refresh" value="Clear" />
        </div>
    </EditForm>
</div>
<br />

<div class="col-12">

    <h3><b>Authors</b></h3>
    <SpinLoader IsLoading="isLoading">
        <LoadingTemplate>
            <div class="col-12" style="background-color: lightgray; height:400px; vertical-align:middle">
                <br /><br />
                <Chase Center="true" Color="#c21f13" Size="70px"></Chase>
            </div>
        </LoadingTemplate>
        <ContentTemplate>
            @if (filteredAuthorList != null)
            {
<GridView Items="filteredAuthorList" ReloadList="IsGridViewFiltered">
    <GridColumns>
        <GridColumn ColumnTitle="AuthorId"
                    OnSearchTextChanged="@(e => OnAuthorSearchTextChanged(e, "AuthorId"))"></GridColumn>
        <GridColumn ColumnTitle="FirstName"
                    OnSearchTextChanged="@(e => OnAuthorSearchTextChanged(e, "FirstName"))"></GridColumn>
        <GridColumn ColumnTitle="LastName"
                    OnSearchTextChanged="@(e => OnAuthorSearchTextChanged(e, "LastName"))"></GridColumn>
        <GridColumn ColumnTitle="City"
                    OnSearchTextChanged="@(e => OnAuthorSearchTextChanged(e, "City"))"></GridColumn>
        <AuthorizeView Roles="Publisher" Policy="SeniorEmployee">
            <Authorized>
                <GridColumn ColumnTitle="Actions" OnActionClicked="@(e=>refresh())"></GridColumn>
            </Authorized>
        </AuthorizeView>
    </GridColumns>
    <GridRow Context="author">
        <td>
            <NavLink href=@string.Format("/authors/authordetail/{0}", @author.AuthorId)>
                @author.AuthorId
            </NavLink>
        </td>
        <td>@author.FirstName</td>
        <td>@author.LastName</td>
        <td>@author.City</td>
        <AuthorizeView Roles="Publisher" Policy="SeniorEmployee">
            <Authorized>
                <th>
                    <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => EditAuthor(author))">Edit</a> |
                    <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => DeleteAuthor(author.AuthorId))">Delete</a>
                </th>
            </Authorized>
        </AuthorizeView>
    </GridRow>
</GridView>}
            <Pagination TotalPagesQuantity="totalPages" CurrentPage="currentPage" Radius="4" SelectedPage="SelectedPage"></Pagination>
        </ContentTemplate>
    </SpinLoader>
</div>

@code { public Author author { get; set; }
    public List<Author> authorList { get; set; }
    public List<Author> filteredAuthorList { get; set; }
    public string SelectedCity { get; set; }
    private int totalPages;
    private int currentPage = 1;

    public bool IsVisible { get; set; }
    public bool Result { get; set; }
    public string RecordName { get; set; }
    public string[] Cities { get; set; }
    public bool IsGridViewFiltered { get; set; }
    public Dictionary<string, string> FiltersDict { get; set; }
    bool isLoading = true;

    ElementReference firstNameTextBox;

    protected override void OnInitialized()
    {
        Console.WriteLine("Authors - OnInitialized");
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Authors - OnInitializedAsync");

        author = new Author();
        authorList = new List<Author>();
        FiltersDict = new Dictionary<string, string>();

        await base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("Authors - OnParametersSet");
        base.OnParametersSet();
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("Authors - OnParametersSetAsync");
        await base.OnParametersSetAsync();
    }

    protected override bool ShouldRender()
    {
        base.ShouldRender();
        Console.WriteLine("Authors - ShouldRender");

        return true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("Authors - OnAfterRender - firstRender = " + firstRender);
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Authors - OnAfterRenderAsync - firstRender = " + firstRender);

        if (firstRender)
        {
            await LoadAuthorsByPage(FiltersDict);

            isLoading = false;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        Console.WriteLine("Authors - Dispose");
    }

    private async Task refresh()
    {
        IsGridViewFiltered = true;
        currentPage = 1;
        await LoadAuthorsByPage(FiltersDict);
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAuthorsByPage(FiltersDict, page: page);
    }

    private async Task LoadAuthorsByPage(Dictionary<string, string> filters, int page = 1, int quantityPerPage = 10)
    {

        var response = await bookStoresService.GetAllAsyncWithResult(populateURI(filters, page, quantityPerPage), "pagesQuantity");
        filteredAuthorList = response.resultList;
        totalPages = response.resultValue;
        StateHasChanged();
    }

    private string populateURI(Dictionary<string, string> filters, int page, int quantityPerPage)
    {
        var result = $"authors/GetAuthorsByPage?page={page}&quantityPerPage={quantityPerPage}";
        if (filters.Count > 0)
        {
            foreach (var item in filters)
            {
                result += $"&{item.Key}={item.Value}";
            }
        }
        return result;
    }

    private async Task SaveAuthor()
    {
        author.City = SelectedCity;

        if (author.AuthorId == 0)
            await bookStoresService.SaveAsync("authors/CreateAuthor", author);
        else
            await bookStoresService.UpdateAsync("authors/UpdateAuthor", author.AuthorId, author);

        await LoadAuthorsByPage(FiltersDict);

        Result = true;
        IsVisible = true;

        var firstName = author.FirstName;
        var lastName = author.LastName;

        RecordName = firstName + " " + lastName;

        author = new Author();

        //await JSRuntime.InvokeVoidAsync("saveMessage", firstName, lastName);
        await JSRuntime.InvokeVoidAsync("setFocusOnElement", firstNameTextBox);
    }

    private async Task DeleteAuthor(int authorId)
    {
        await bookStoresService.DeleteAsync("authors/DeleteAuthor/", authorId);
        await LoadAuthorsByPage(FiltersDict);

        //throw new Exception("DeleteAuthor");
    }

    private void EditAuthor(Author argAuthor)
    {
        author = argAuthor;
    }

    private void OnSelectCityChange(ChangeEventArgs changeEventArgs)
    {
        SelectedCity = (string)changeEventArgs.Value;
    }

    private void OnAuthorSearchTextChanged(ChangeEventArgs changeEventArgs, string columnTitle)
    {
        string searchText = changeEventArgs.Value.ToString();
        if (FiltersDict.ContainsKey(columnTitle))
            FiltersDict.Remove(columnTitle);
        FiltersDict.Add(columnTitle, searchText);
    } }